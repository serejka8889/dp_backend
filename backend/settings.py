"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings
"""
import rollbar
import os
import sys
from datetime import timedelta
from pathlib import Path
import environ
from environ import ImproperlyConfigured
from baton.ai import AIModels

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Dir export
EXPORT_DIR = os.path.join(BASE_DIR, 'exports')

# Создаём экземпляр Env
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=str,
    DB_ENGINE=str,
    DB_NAME=str,
    REDIS_LOCATION=str,
    CELERY_BROKER_URL=str,
    CELERY_RESULT_BACKEND=str,
    EMAIL_BACKEND=str,
    EMAIL_HOST=str,
    EMAIL_PORT=int,
    EMAIL_USE_TLS=(bool, False),
    EMAIL_USE_SSL=(bool, False),
    EMAIL_HOST_USER=str,
    EMAIL_HOST_PASSWORD=str,
    DEFAULT_FROM_EMAIL=str,
    SERVER_EMAIL=str,
    ADMIN_EMAIL=str,
    SITE_URL=str,
    JWT_SIGNING_KEY=str,
    SOCIAL_AUTH_YANDEX_KEY=str,
    SOCIAL_AUTH_YANDEX_SECRET=str,
    SOCIAL_AUTH_GITHUB_KEY=str,
    SOCIAL_AUTH_GITHUB_SECRET=str,
    ROLLBAR_ACCESS_TOKEN=str,
)

try:
    # Явно указываем путь к файлу env.example
    env.read_env(os.path.join(BASE_DIR, '.env'))
except ImproperlyConfigured as e:
    print(f"Ошибка загрузки переменных окружения: {e}")
    sys.exit(1)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS') if not DEBUG else ["*"]

# Читаем переменные окружения из файла env.example
env = environ.Env()
environ.Env.read_env(env_file=os.path.join(BASE_DIR, 'env.example'))

# Application definition
INSTALLED_APPS = [
    'baton',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_yasg',
    'celery',
    'service.apps.ServiceConfig',
    'social_django',
    'versatileimagefield',
    'cachalot',
    'baton.autodiscover',
]

ROLLBAR_ACCESS_TOKEN = env('ROLLBAR_ACCESS_TOKEN')
ROLLBAR_ENVIRONMENT = 'development'

rollbar.init(
    access_token=ROLLBAR_ACCESS_TOKEN,
    environment=ROLLBAR_ENVIRONMENT,
    root=str(BASE_DIR),
    allow_logging_basic_config=True,
)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'rollbar': {  # Новый handler для Rollbar
            'level': 'ERROR',  # Отправлять в Rollbar только ошибки
            'access_token': ROLLBAR_ACCESS_TOKEN,
            'environment': ROLLBAR_ENVIRONMENT,
            'formatter': 'simple',
            'class': 'rollbar.logger.RollbarHandler',
        },
    },
    'loggers': {
        '': {  # Основной logger
            'handlers': ['console', 'rollbar'],  # Логируем в консоль и отправляем ошибки в Rollbar
            'level': 'INFO',
            'propagate': True,
        },
    },
}

TEST_RUNNER = 'django.test.runner.DiscoverRunner'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': env('DB_ENGINE'),
        'NAME': env('DB_NAME'),
    }
}

AUTH_USER_MODEL = 'service.CustomUser'

AUTHENTICATION_BACKENDS = [
    'social_core.backends.yandex.YandexOAuth2',  # Yandex
    'social_core.backends.github.GithubOAuth2',  # GitHub
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n
LANGUAGE_CODE = 'ru-RU'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'collected_static'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Settings for REST Framework
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',  # Парсер для обработки JSON-запросов
        'rest_framework.parsers.FormParser',  # Парсер для обработки форм (application/x-www-form-urlencoded)
        'rest_framework.parsers.MultiPartParser',  # Парсер для обработки файлов и mixed-content (multipart/form-data)
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Отключил для нормальной работы юнит тестов, иначе срабатывает тротлинг
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',  # Для анонимных пользователей
    #     'rest_framework.throttling.UserRateThrottle',  # Для авторизованных пользователей
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '100/day',  # Ограничение для авторизованных пользователей
    #     'anon': '10/day',   # Ограничение для анонимных пользователей
    # }
}

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'service.pipelines.jwt_response_with_refresh_token',
)

VERSATILEIMAGEFIELD_SETTINGS = {
    'cache_length': 2592000,     # срок хранения кеша ~ месяц
    'jpeg_resize_quality': 70,    # качество сжатия jpeg-файлов
    'sized_directory_name': '__sized__',  # директория для хранения сжатых изображений
    'filtered_directory_name': '__filtered__',  # директория для фильтраций
    'placeholder_image': None,   # заглушка
    'create_images_on_demand': True,  # изображение
}


# Секретный ключ для JWT
JWT_SIGNING_KEY = env('JWT_SIGNING_KEY')

# Конфигурация JWT-токенов
SIMPLE_JWT = {
    'SIGNING_KEY': JWT_SIGNING_KEY,
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Время жизни токена доступа
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Срок жизни токена обновления
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}


# CORS configuration
CORS_ALLOW_ALL_ORIGINS = True


# Redis cache configuration
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('REDIS_LOCATION'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Включаем использование django-cachalot
CACHALOT_ENABLED = True

# Специальные исключения
# CACHALOT_UNCACHEABLE_TABLES = []
# CACHALOT_TIMEOUT = None  # По умолчанию 86400 секунд (сутки)

# Конфигурация Baton
BATON = {
    'SITE_HEADER': 'Backend-приложение для автоматизации закупок',
    'SITE_TITLE': 'Backend-приложение для автоматизации закупок',
    'INDEX_TITLE': 'Site administration',
    'SUPPORT_HREF': 'https://github.com/otto-torino/django-baton/issues',
    'COPYRIGHT': 'copyright © 2017 <a href="https://www.otto.to.it">Otto srl</a>', # noqa
    'POWERED_BY': '<a href="https://www.otto.to.it">Otto srl</a>',
    'CONFIRM_UNSAVED_CHANGES': True,
    'SHOW_MULTIPART_UPLOADING': True,
    'ENABLE_IMAGES_PREVIEW': True,
    'CHANGELIST_FILTERS_IN_MODAL': True,
    'CHANGELIST_FILTERS_ALWAYS_OPEN': True,
    'CHANGELIST_FILTERS_FORM': True,
    'CHANGEFORM_FIXED_SUBMIT_ROW': True,
    'COLLAPSABLE_USER_AREA': False,
    # 'MENU_ALWAYS_COLLAPSED': True,
    'MENU_TITLE': 'Menu',
    'MESSAGES_TOASTS': False,
    'GRAVATAR_DEFAULT_IMG': 'retro',
    'GRAVATAR_ENABLED': True,
    'FORCE_THEME': None,
    'LOGIN_SPLASH': '/static/core/img/login-splash.png',
    'SEARCH_FIELD': {
        'label': 'Search contents...',
        'url': '/search/',
    },
    'BATON_CLIENT_ID': 'xxxxxxxxxxxxxxxxxxxx',
    'BATON_CLIENT_SECRET': 'xxxxxxxxxxxxxxxxxx',
    'IMAGE_PREVIEW_WIDTH': 200,
    "AI": {
        "ENABLE_TRANSLATIONS": True,
        "ENABLE_CORRECTIONS": True,
    },
}

# set the celery broker url
CELERY_BROKER_URL = env('CELERY_BROKER_URL')

# set the celery result backend
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')

# set the celery timezone
CELERY_TIMEZONE = 'UTC'


# EMAIL
EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env.int('EMAIL_PORT')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = env('SERVER_EMAIL')

# EMAIL admin
ADMIN_EMAIL = env('ADMIN_EMAIL')

# Address server
SITE_URL = env('SITE_URL')

# Yandex
# SOCIAL_AUTH_YANDEX_OAUTH2_KEY = env('SOCIAL_AUTH_YANDEX_OAUTH2_KEY')
# SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = env('SOCIAL_AUTH_YANDEX_OAUTH2_SECRET')

SOCIAL_AUTH_YANDEX_KEY = env('SOCIAL_AUTH_YANDEX_KEY')
SOCIAL_AUTH_YANDEX_SECRET = env('SOCIAL_AUTH_YANDEX_SECRET')

# GitHub
SOCIAL_AUTH_GITHUB_KEY = env('SOCIAL_AUTH_GITHUB_KEY')
SOCIAL_AUTH_GITHUB_SECRET = env('SOCIAL_AUTH_GITHUB_SECRET')

SOCIAL_AUTH_URL_NAMESPACE = 'social'
LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'home'

