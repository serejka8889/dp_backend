from unittest.mock import patch
from django.test import override_settings
from django.test import TestCase
from rest_framework.test import APIRequestFactory
from rest_framework import status
from rest_framework.response import Response
from service.views import CartView
from rest_framework_simplejwt.tokens import AccessToken
from service.models import CustomUser, Product, ProductInfo, Category, Shop, Cart, CartItem
from decimal import Decimal
import time  # Для паузы между запросами

class CartViewTests(TestCase):
    def setUp(self):
        self.factory = APIRequestFactory()
        self.view = CartView.as_view()
        # Создаем активного пользователя
        self.user = CustomUser.objects.create_user(email='test@example.com', password='password', is_active=True)
        # Создаем токен для пользователя
        self.access_token = AccessToken.for_user(self.user)
        # Создаем категорию
        self.category = Category.objects.create(name='Electronics')
        # Создаем магазин
        self.shop = Shop.objects.create(name='Tech Store')
        # Создаем первый товар
        self.product1 = Product.objects.create(name='Smartphone', category=self.category)
        # Создаем подробную информацию о первом товаре
        self.product_info1 = ProductInfo.objects.create(
            product=self.product1,
            external_id=1,
            model='Model X',
            price=Decimal('999.99'),
            quantity=10,
            shop=self.shop
        )
        # Создаем второй товар
        self.product2 = Product.objects.create(name='Headphones', category=self.category)
        # Создаем подробную информацию о втором товаре
        self.product_info2 = ProductInfo.objects.create(
            product=self.product2,
            external_id=2,
            model='Audio Pro',
            price=Decimal('199.99'),
            quantity=5,
            shop=self.shop
        )
        # Получаем или создаем корзину пользователя
        self.cart, _ = Cart.objects.get_or_create(user=self.user)
        # Добавляем товары в корзину
        self.cart_item1 = CartItem.objects.create(cart=self.cart, product=self.product_info1, quantity=2)
        self.cart_item2 = CartItem.objects.create(cart=self.cart, product=self.product_info2, quantity=1)

    @override_settings(REST_FRAMEWORK={
        'DEFAULT_THROTTLE_CLASSES': [
            'rest_framework.throttling.AnonRateThrottle',  # Для анонимных пользователей
            'rest_framework.throttling.UserRateThrottle',  # Для авторизованных пользователей
        ],
        'DEFAULT_THROTTLE_RATES': {
            'user': '10/minute',  # Ограничение 10 запросов в минуту
            'anon': '5/minute',   # Ограничение 5 запросов в минуту для анонимных пользователей
        }
    })
    def test_cart_view_trottling(self):
        """Тест на применение тротлинга при просмотре корзины"""
        # Подготавливаем запросы
        requests_count = 15  # Больше лимита (10/мин)
        responses = []

        # Отправляем серию запросов
        for _ in range(requests_count):
            request = self.factory.get('/api/v1/cart/')
            request.META['HTTP_AUTHORIZATION'] = f'Bearer {self.access_token}'
            response = self.view(request)
            responses.append(response)
            time.sleep(61)  # Пауза в 61 секунду между запросами, чтобы гарантированно попасть в новый лимит

        # Первые 10 запросов должны быть успешными
        successful_responses = [resp for resp in responses[:10]]
        for resp in successful_responses:
            self.assertEqual(resp.status_code, status.HTTP_200_OK)

        # Последний запрос превысит лимит и вернет ошибку
        exceeded_response = responses[-1]
        self.assertEqual(exceeded_response.status_code, status.HTTP_429_TOO_MANY_REQUESTS)